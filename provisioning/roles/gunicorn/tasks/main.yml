---
###INSTALL ANY PYTHON VERSION

- name: Install required package s
  apt: name={{item}} state=present
  with_items:
    - git 
    - python3-pip 
    - systemd 
    - postgresql-server-dev-all 
    - postgresql-client 
    - postgresql  
    - python-psycopg2
    - python3-pexpect 
    - expect 
#    - wget 
#    - python-virtualenv 


- shell: "python3 --version"
  register: python_installed
- name: print a registered variable
  debug: var=python_installed.stderr_lines

- name: Install django, postgresql packages
  ansible.builtin.pip:
    name: "{{item}}" 
    executable: pip3
  with_items:
#    - django==2.0
    - django==1.8.3
    - django-compressor
    - psycopg2==2.6.1 
    - djangorestframework==3.1.3 
    - django-filter==0.10.0  
    - markdown==2.6.2


- name: Create a vagrant user acting as the user vagrant (sudo su - postgres) 
  become_user: postgres 
  shell: "createuser vagrant -s"
  failed_when: false

- name: Create a new database wth specific encoding 
  become_user: postgres
  community.postgresql.postgresql_db:
    name: scrum 
    encoding: UTF-8

- name: Clone a repo with separate git directory
  ansible.builtin.git:
#    repo: https://github.com/TorresAWS/djangorest 
    repo: https://github.com/lightweightdjango/examples.git 
    dest: /src/djangorest
#    separate_git_dir: /src/djangorest.git
    single_branch: yes
    version: chapter-4 
    force: yes 

- name: create database migration files based on changes on models
  become: false
  shell: python3 manage.py  makemigrations board 
  args:
    chdir: "{{django_dir}}"

- name: apply migrations 
  become: false 
  shell: python3 manage.py  migrate 
  args:
    chdir: "{{django_dir}}"

- name: super user existed?
  become: false 
  shell: echo "from django.contrib.auth import get_user_model; User = get_user_model(); print(User.objects.filter(username='{{admin_user}}').count()>0)" | python3 ./manage.py shell
  args:
    chdir: "{{django_dir}}"
  register: superuser_existed

- name: save superuser_existed.stdout_line as boolean 
  set_fact:
    superuser_existed={{superuser_existed.stdout_lines[0].split('>>>')[1:]   }}


#### Delete superuser django echo "from django.contrib.auth.models import User ; User.objects.get(username='vagrant', is_superuser=True).delete()" | python3 ./manage.py shell

- name: prints out SuperUser exist 
  debug: 
     msg: "SuperUser exist"
  when: not superuser_existed
- name: prints out SuperUser dont exists 
  debug: 
     msg: "SuperUser dont exists"
  when:  superuser_existed

- name: replaces python for python3 in manage.py 
  shell: sed -i 's/python/python3/' /src/djangorest/scrum/manage.py 

- name: Create Django super user if it doesnt exist
  become: false 
  django_manage: command="createsuperuser --noinput --username={{admin_user}} --email={{admin_email}}"
                 app_path={{django_dir}}
  when:  superuser_existed

- name: Change Django superuser password 
  no_log: False 
  become: false 
  shell: |
    set timeout 300
    log_user 0
    spawn /usr/bin/python3 manage.py  changepassword  "{{ admin_user }}" 
    expect "Password for * "
    send "{{ admin_pass }}\n"
    expect "Password for * "
    send "{{ admin_pass }}\n"
    exit 0
  args:
    executable: /usr/bin/expect



- name: Template a file to /etc/file.conf
  ansible.builtin.template:
    src: ./templates/test.service.j2
    dest: /etc/systemd/system/test.service 

- name: Make sure a service is running
  systemd:
    state: started
    name: test.service 



